import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

public class VacationPlannerApp extends Application {

    private TextField nameField, emailField, passwordField, phoneNumberField, profilePictureField;
    private TextField destinationField, startDateField, endDateField, budgetField;
    private TextField itineraryActivityField, itineraryLocationField, itineraryDateField, itineraryTimeField, itineraryDurationField, itineraryNotesField;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Vacation Planner App");

        // Main layout
        TabPane tabPane = new TabPane();

        // User Tab
        Tab userTab = new Tab("Create User", createUserForm());
        tabPane.getTabs().add(userTab);

        // Trip Tab
        Tab tripTab = new Tab("Create Trip", createTripForm());
        tabPane.getTabs().add(tripTab);

        // Itinerary Tab
        Tab itineraryTab = new Tab("Create Itinerary", createItineraryForm());
        tabPane.getTabs().add(itineraryTab);

        // Main Scene
        Scene scene = new Scene(tabPane, 600, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private GridPane createUserForm() {
        GridPane grid = new GridPane();

        // Form fields
        nameField = new TextField();
        emailField = new TextField();
        passwordField = new PasswordField();
        phoneNumberField = new TextField();
        profilePictureField = new TextField();

        // Add form fields to grid
        grid.add(new Label("Name:"), 0, 0);
        grid.add(nameField, 1, 0);
        grid.add(new Label("Email:"), 0, 1);
        grid.add(emailField, 1, 1);
        grid.add(new Label("Password:"), 0, 2);
        grid.add(passwordField, 1, 2);
        grid.add(new Label("Phone Number:"), 0, 3);
        grid.add(phoneNumberField, 1, 3);
        grid.add(new Label("Profile Picture URL:"), 0, 4);
        grid.add(profilePictureField, 1, 4);

        // Submit button
        Button submitButton = new Button("Create User");
        submitButton.setOnAction(e -> handleCreateUser());
        grid.add(submitButton, 1, 5);

        return grid;
    }

    private GridPane createTripForm() {
        GridPane grid = new GridPane();

        // Form fields
        destinationField = new TextField();
        startDateField = new TextField();
        endDateField = new TextField();
        budgetField = new TextField();

        // Add form fields to grid
        grid.add(new Label("Destination:"), 0, 0);
        grid.add(destinationField, 1, 0);
        grid.add(new Label("Start Date (YYYY-MM-DD):"), 0, 1);
        grid.add(startDateField, 1, 1);
        grid.add(new Label("End Date (YYYY-MM-DD):"), 0, 2);
        grid.add(endDateField, 1, 2);
        grid.add(new Label("Budget:"), 0, 3);
        grid.add(budgetField, 1, 3);

        // Submit button
        Button submitButton = new Button("Create Trip");
        submitButton.setOnAction(e -> handleCreateTrip());
        grid.add(submitButton, 1, 4);

        return grid;
    }

    private GridPane createItineraryForm() {
        GridPane grid = new GridPane();

        // Form fields
        itineraryActivityField = new TextField();
        itineraryLocationField = new TextField();
        itineraryDateField = new TextField();
        itineraryTimeField = new TextField();
        itineraryDurationField = new TextField();
        itineraryNotesField = new TextField();

        // Add form fields to grid
        grid.add(new Label("Activity:"), 0, 0);
        grid.add(itineraryActivityField, 1, 0);
        grid.add(new Label("Location:"), 0, 1);
        grid.add(itineraryLocationField, 1, 1);
        grid.add(new Label("Date (YYYY-MM-DD):"), 0, 2);
        grid.add(itineraryDateField, 1, 2);
        grid.add(new Label("Time (HH:MM):"), 0, 3);
        grid.add(itineraryTimeField, 1, 3);
        grid.add(new Label("Duration (hours):"), 0, 4);
        grid.add(itineraryDurationField, 1, 4);
        grid.add(new Label("Notes:"), 0, 5);
        grid.add(itineraryNotesField, 1, 5);

        // Submit button
        Button submitButton = new Button("Create Itinerary");
        submitButton.setOnAction(e -> handleCreateItinerary());
        grid.add(submitButton, 1, 6);

        return grid;
    }

    private void handleCreateUser() {
        try {
            String name = nameField.getText();
            String email = emailField.getText();
            String password = passwordField.getText();
            String phoneNumber = phoneNumberField.getText();
            String profilePicture = profilePictureField.getText();

            User user = new User();
            user.setName(name);
            user.setEmail(email);
            user.setPassword(password);
            user.setPhoneNumber(phoneNumber);
            user.setProfilePicture(profilePicture);

            // Display success message
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("User Created");
            alert.setHeaderText(null);
            alert.setContentText("User " + user.getName() + " created successfully!");
            alert.showAndWait();
        } catch (Exception e) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText(null);
            alert.setContentText("Failed to create user: " + e.getMessage());
            alert.showAndWait();
        }
    }

    private void handleCreateTrip() {
        try {
            String destination = destinationField.getText();
            LocalDate startDate = LocalDate.parse(startDateField.getText());
            LocalDate endDate = LocalDate.parse(endDateField.getText());
            double budget = Double.parseDouble(budgetField.getText());

            Trip trip = new Trip();
            trip.setDestination(destination);
            trip.setStartDate(startDate);
            trip.setEndDate(endDate);
            trip.setBudget(budget);

            // Display trip details
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Trip Created");
            alert.setHeaderText(null);
            alert.setContentText("Trip to " + trip.getDestination() + " created successfully!");
            alert.showAndWait();
        } catch (Exception e) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText(null);
            alert.setContentText("Failed to create trip: " + e.getMessage());
            alert.showAndWait();
        }
    }

    private void handleCreateItinerary() {
        try {
            String activity = itineraryActivityField.getText();
            String location = itineraryLocationField.getText();
            LocalDate date = LocalDate.parse(itineraryDateField.getText());
            LocalTime time = LocalTime.parse(itineraryTimeField.getText());
            double duration = Double.parseDouble(itineraryDurationField.getText());
            String notes = itineraryNotesField.getText();

            Itinerary itinerary = new Itinerary();
            itinerary.setActivity(activity);
            itinerary.setLocation(location);
            itinerary.setDate(date);
            itinerary.setTime(time);
            itinerary.setDuration(duration);
            itinerary.setNotes(notes);

            // Display success message
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Itinerary Created");
            alert.setHeaderText(null);
            alert.setContentText("Itinerary for " + itinerary.getActivity() + " created successfully!");
            alert.showAndWait();
        } catch (Exception e) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText(null);
            alert.setContentText("Failed to create itinerary: " + e.getMessage());
            alert.showAndWait();
        }
    }
}

